{
  "url": "https://npepa32v9l.execute-api.us-east-1.amazonaws.com/v2/?project_id=19989138&filename=python/0_ao_py_strings.html&ref=master",
  "content": "<div class=\"mce-toc\">\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#mcetoc_1euqqp1f00\">Dia 2: Strings</a></li>\n<li><a href=\"#mcetoc_1epr2epkn14f\">Strings</a>\n<ul>\n<li><a href=\"#mcetoc_1epr2epkn14h\">Indexa\u00e7\u00e3o e Fatiamento</a>\n<ul>\n<li><a href=\"#mcetoc_1esrmp0l8p\">\u00cdndices:</a></li>\n<li><a href=\"#mcetoc_1esrmp0l8q\">Fatiamento</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1epr2epkn14i\">M\u00e9todos de Strings</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>\u00a0</p>\n<h1 id=\"mcetoc_1euqqp1f00\">Dia 2: Strings</h1>\n<p class=\"page-title\" style=\"font-family: sans-serif;\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br/>Ol\u00e1, desenvolvedores! O nosso conte\u00fado do dia englobar\u00e1 algumas das estruturas fundamentais do Python, as strings. Esperamos que voc\u00eas possam tirar o m\u00e1ximo poss\u00edvel de proveito do conte\u00fado que estamos disponibilizando, n\u00e3o esque\u00e7am de praticar bastante para fixar bem.</span></p>\n<h1 class=\"page-title\" id=\"mcetoc_1epr2epkn14f\" style=\"font-family: sans-serif;\">Strings</h1>\n<p style=\"font-family: sans-serif;\">Um objeto string em Python tem informa\u00e7\u00f5es de caracteres e pode conter qualquer n\u00famero de caracteres, inclusive zero. Muitas vezes voc\u00ea ver\u00e1 esse tipo de dado abreviado como\u00a0<em>str</em>.</p>\n<p style=\"font-family: sans-serif;\">As strings s\u00e3o indicadas usando aspas simples, aspas duplas ou aspas triplas. As aspas simples s\u00e3o utilizadas para maioria dos casos. Se quisermos inserir aspas simples dentro da string, teremos duas alternativas, a primeira alternativa \u00e9 usar o operador de escape\u00a0<span data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-color=\"\" style=\"font-family: terminal, monaco, monospace; color: #ba372a; background-color: #ced4d9;\">\\</span>\u00a0antes das aspas, e a segunda alternativa \u00e9 envolver sua string com aspas duplas. O mesmo vale para strings que cont\u00e9m aspas duplas, precisamos ou anular esse caractere com o operador de escape\u00a0<span data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-color=\"\" style=\"color: #ba372a; background-color: #ced4d9; font-family: terminal, monaco, monospace;\">\\</span>\u00a0ou envolver a string com aspas simples. As aspas triplas s\u00e3o usadas para strings longas que podem se estender por v\u00e1rias linhas. O tipo de aspa usada no final da string deve corresponder ao tipo de aspa do come\u00e7o.</p>\n<p style=\"font-family: sans-serif;\">As aspas simples podem conter aspas duplas dentro delas, e vice-versa. Aqui vai alguns exemplos.</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>my_name = 'Kenzie' # single-quoted string\nmixed_quote = \"Kenzie won't let me down\" # double-quoted string with single embedded quote\nmulti_line = \"\"\"Red sky at night:\nsailor's delight. Red sky at morning:\nsailor's warning.\"\"\"\nescaped_string = 'Here\\'s looking at you, kid'\nempty_string = ''</code></pre>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<h2 id=\"mcetoc_1epr2epkn14h\" style=\"font-family: sans-serif;\">Indexa\u00e7\u00e3o e Fatiamento</h2>\n<p style=\"font-family: sans-serif;\">As strings s\u00e3o consideradas\u00a0<em>listas</em>\u00a0em Python, e, portanto, os caracteres dentro delas podem ser acessados via \u00edndice ou\u00a0<em>fatiamento</em>.</p>\n<h3 id=\"mcetoc_1esrmp0l8p\" style=\"font-family: sans-serif;\">\u00cdndices:</h3>\n<p style=\"font-family: sans-serif;\">Para acessar um caractere em uma posi\u00e7\u00e3o espec\u00edfica dentro de uma string, coloque um inteiro que representa a posi\u00e7\u00e3o do caractere entre colchetes,\u00a0<span data-darkreader-inline-bgcolor=\"\" data-darkreader-inline-color=\"\" style=\"color: #ba372a; background-color: #ced4d9; font-family: terminal, monaco, monospace;\"><code>[]</code></span>.</p>\n<p style=\"font-family: sans-serif;\">Os n\u00fameros positivos come\u00e7am pela esquerda, pelo 0, e os n\u00fameros negativos come\u00e7am pela direita, pelo -1.</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>s = \"some string\"\ns[0] # s\ns[3] # e\ns[-1] # g</code></pre>\n<h3 id=\"mcetoc_1esrmp0l8q\" style=\"font-family: sans-serif;\">Fatiamento</h3>\n<p style=\"font-family: sans-serif;\">Para acessar grupos de caracteres dentro de uma string, chamados\u00a0<em>fatias</em>, use dois pontos (<code>:</code>) para separar a posi\u00e7\u00e3o inicial da posi\u00e7\u00e3o final. A sintaxe se parece com isso\u00a0<code>string[start:stop:step]</code>, onde\u00a0<em>start</em>,\u00a0<em>stop</em>\u00a0e\u00a0<em>step</em>\u00a0s\u00e3o inteiros.</p>\n<ul style=\"font-family: sans-serif;\">\n<li>A posi\u00e7\u00e3o\u00a0<em>start</em>\u00a0est\u00e1 inclusa na fatia resultante.</li>\n<li>A posi\u00e7\u00e3o\u00a0<em>stop</em>\u00a0<strong>n\u00e3o</strong>\u00a0est\u00e1 inclusa na fatia resultante.</li>\n<li>O valor de\u00a0<em>step</em>\u00a0indica quantos caracteres devem ser pulados por vez.</li>\n<li>Todos os valores s\u00e3o opcionais, desde que seja inclu\u00eddo um dois pontos para representar a opera\u00e7\u00e3o de fatiamento.</li>\n</ul>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>s = \"some string\"\ns[0:4] # valores de start e stop expl\u00edcitos: 'some'\ns[5:11:2] # inclui um valor step -- fatia a cada duas posi\u00e7\u00f5es da posi\u00e7\u00e3o 5 at\u00e9 a posi\u00e7\u00e3o 11: 'srn'\ns[:4] # omite o valor para start -- o valor 0 fica impl\u00edcito por default: 'some'\ns[5:] # omite o valor para stop -- a \u00faltima posi\u00e7\u00e3o da string fica impl\u00edcita por default 'string'\ns[:] # omitir o valor para start, stop e step 'some string'</code></pre>\n<p style=\"font-family: sans-serif;\">Voc\u00ea pode usar at\u00e9 mesmo valores negativos para criar fatias interessantes.</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>s = \"some string\"\ns[-6:]  # inicia 6 caracteres antes do caractere final: 'string'\ns[:-7]  # para o fatiamento 7 caracteres antes do caractere final:'some'\ns[::-1]  # inverte a string: 'gnirts emos'</code></pre>\n<h2 id=\"mcetoc_1epr2epkn14i\" style=\"font-family: sans-serif;\">M\u00e9todos de Strings</h2>\n<p style=\"font-family: sans-serif;\">Vamos explorar alguns m\u00e9todos incorporados que vem com cada objeto string.</p>\n<p style=\"font-family: sans-serif;\"><code>capitalize()</code>\u00a0- muda o primeiro caractere da string para mai\u00fasculo</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.capitalize()\n'Some string'</code></pre>\n<p style=\"font-family: sans-serif;\"><code>count()</code>\u00a0- retorna o n\u00famero de ocorr\u00eancias de uma determinada sub-string da string</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string for me\"\n&gt;&gt;&gt; s.count(\"me\")\n2</code></pre>\n<p style=\"font-family: sans-serif;\"><code>endswith()</code>\u00a0- informa se a string termina com uma determinada sub-string</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.endswith(\"ing\")\nTrue</code></pre>\n<p style=\"font-family: sans-serif;\"><code>find()</code>\u00a0- retorna o primeiro \u00edndice de onde uma determinada sub-string \u00e9 encontrada dentro da string (retorna -1 se n\u00e3o encontrar nada)</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.find(\"me\")\n2\n&gt;&gt;&gt; s.find(\"x\")\n-1</code></pre>\n<p style=\"font-family: sans-serif;\"><code>index()</code>\u00a0- o mesmo que\u00a0<code>find()</code>, mas retorna uma exce\u00e7\u00e3o ValueError caso a sub-string n\u00e3o seja encontrada</p>\n<p style=\"font-family: sans-serif;\"><code>isalpha()</code>,\u00a0<code>isdigit()</code>,\u00a0<code>isspace ()</code>\u00a0- informa se a string satisfaz os crit\u00e9rios de alfanum\u00e9rico, n\u00famero e espa\u00e7o</p>\n<p style=\"font-family: sans-serif;\">H\u00e1 um monte desses tipos de m\u00e9todos que verificam as caracter\u00edsticas de uma string. Digite\u00a0<code>dir(str)</code>\u00a0no REPL para consult\u00e1-los.</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.isalpha() # retorna False por conta do espa\u00e7o\nFalse</code></pre>\n<p style=\"font-family: sans-serif;\"><code>join()</code>\u00a0- insere a string entre cada item de um determinado dado iter\u00e1vel</p>\n<p style=\"font-family: sans-serif;\">Este m\u00e9todo \u00e9 frequentemente usado anexado diretamente a uma string literal para ser usado como um separador para outros dados.</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"xyz\"\n&gt;&gt;&gt; \".\".join(s) # put dots in between each letter of s\n'x.y.z'</code></pre>\n<p style=\"font-family: sans-serif;\"><code>lower()</code>\u00a0- retorna uma vers\u00e3o em letras min\u00fasculas da string</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"SOME STRING\"\n&gt;&gt;&gt; s.lower()\n'some string'</code></pre>\n<p style=\"font-family: sans-serif;\"><code>replace()</code>\u00a0- substitui todas as ocorr\u00eancias de uma sub-string da string por uma determinada string</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.replace(\"s\", \"z\")\n'zome ztring'</code></pre>\n<p style=\"font-family: sans-serif;\"><code>split()</code>\u00a0- retorna uma lista de palavras de uma string, com um separador opcional para ser usado como delimitador</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.split() # default usage\n['some', 'string']\n&gt;&gt;&gt; s.split(\"t\")\n['some s', 'ring']</code></pre>\n<p style=\"font-family: sans-serif;\"><code>startswith()</code>\u00a0- informa se uma string come\u00e7a com uma determinada sub-string</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"some string\"\n&gt;&gt;&gt; s.startswith(\"so\")\nTrue</code></pre>\n<p style=\"font-family: sans-serif;\"><code>strip()</code>\u00a0- remove os espa\u00e7os em branco iniciais e finais do texto</p>\n<p style=\"font-family: sans-serif;\">Opcionalmente, voc\u00ea pode indicar um caractere alternativo para remover do in\u00edcio e do final do texto.</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \" some string \"\n&gt;&gt;&gt; s.strip()\n'some string'\n&gt;&gt;&gt; s = \"some strings\"\n&gt;&gt;&gt; s.strip(\"s\")\n'ome string'</code></pre>\n<p style=\"font-family: sans-serif;\"><code>upper()</code>\u00a0- retorna uma vers\u00e3o mai\u00fascula da string</p>\n<p style=\"font-family: sans-serif;\">\u00a0</p>\n<pre class=\"language-python\" style=\"color: #657b83; background-color: #fdf6e3; text-shadow: white 0px 1px; font-size: medium; word-spacing: 0px; border-radius: 0.3em;\"><code>&gt;&gt;&gt; s = \"so"
}